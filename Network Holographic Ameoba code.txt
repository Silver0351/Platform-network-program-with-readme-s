import numpy as np
import scipy.signal
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

class CymaticDataNetwork:
    def encode_data(self, data):
    # Convert data into sine waves or Lissajous curves parameters
    # Here, we'll use sine waves for simplicity
    frequencies = np.linspace(20, 20000, len(data))
    amplitudes = np.array(data) / np.max(data)  # Normalize data to create amplitudes
    phases = np.random.uniform(0, 2*np.pi, len(data))
    
    # Generate sine waves
    time = np.linspace(0, 1, 1000)
    sine_waves = [amplitudes[i] * np.sin(2 * np.pi * frequencies[i] * time + phases[i]) for i in range(len(data))]
    
    # Use tuple(data) to make it hashable or use another identifier
    data_hash = tuple(data)  # Convert to tuple for hashability
    self.data_to_sound[data_hash] = sine_waves
    
    # Also, update sound_to_data mapping for decoding
    self.sound_to_data[tuple(sine_waves)] = data  # Here, we need to hash sine_waves too
    
    return sine_waves

    def simulate_ferrofluid_response(self, sine_waves):
        # This would be where you'd simulate how ferrofluid reacts to sound
        # For now, we'll simulate by creating a simple pattern based on wave properties
        pattern = np.mean(np.abs(np.array(sine_waves)), axis=0)
        self.ferrofluid_patterns[sine_waves] = pattern
        return pattern

    def decode_data_from_shape(self, shape):
        # Here, interpret the ferrofluid shape to get back the data
        # This is highly theoretical; in practice, you'd need complex pattern recognition
        # For simplicity, let's assume we can directly map back to data via some inverse function
        return np.array([np.mean(shape)] * len(shape))  # Placeholder for real decoding

    def transmit_audio_frames(self, sine_waves, frame_rate=30):
        # Split sine waves into frames for transmission
        frames = []
        for i in range(0, len(sine_waves[0]), len(sine_waves[0]) // frame_rate):
            frames.append([wave[i:i + len(sine_waves[0]) // frame_rate] for wave in sine_waves])
        return frames

    def process_frames(self, frames):
        # Process frames with error correction (highly simplified)
        corrected_frames = []
        for frame in frames:
            # Simulate some frames being corrupted
            if np.random.random() < 0.2:  # 20% chance of corruption
                corrected_frames.append(np.zeros_like(frame[0]))  # Replace with zeros for corrupted data
            else:
                corrected_frames.append(frame[0])  # Assume first wave of frame for simplicity
        return corrected_frames

    def reconstruct_data(self, corrected_frames):
        # Reconstruct data from corrected frames
        full_wave = np.concatenate(corrected_frames)
        return self.decode_data_from_shape(full_wave)

    def visualize_ferrofluid_shape(self, pattern):
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        x = np.linspace(0, len(pattern), 100)
        y = np.sin(x)
        z = pattern
        ax.plot(x, y, z)
        plt.show()

# Example usage:
if __name__ == "__main__":
    network = CymaticDataNetwork()
    
    # Encode some data
    data = np.random.rand(10)  # Example data
    sine_waves = network.encode_data(data)
    
    # Simulate ferrofluid response
    ferro_pattern = network.simulate_ferrofluid_response(sine_waves)
    network.visualize_ferrofluid_shape(ferro_pattern)
    
    # Transmit in frames
    frames = network.transmit_audio_frames(sine_waves)
    processed_frames = network.process_frames(frames)
    
    # Decode back to data
    decoded_data = network.reconstruct_data(processed_frames)
    print("Original Data:", data)
    print("Decoded Data:", decoded_data)
    def encode_data(self, data):
    # Convert data into sine waves or Lissajous curves parameters
    # Here, we'll use sine waves for simplicity
    frequencies = np.linspace(20, 20000, len(data))
    amplitudes = np.array(data) / np.max(data)  # Normalize data to create amplitudes
    phases = np.random.uniform(0, 2*np.pi, len(data))
    
    # Generate sine waves
    time = np.linspace(0, 1, 1000)
    sine_waves = [amplitudes[i] * np.sin(2 * np.pi * frequencies[i] * time + phases[i]) for i in range(len(data))]
    
    # Use tuple(data) to make it hashable or use another identifier
    data_hash = tuple(data)  # Convert to tuple for hashability
    self.data_to_sound[data_hash] = sine_waves
    
    # Also, update sound_to_data mapping for decoding
    self.sound_to_data[tuple(sine_waves)] = data  # Here, we need to hash sine_waves too
    
    return sine_waves