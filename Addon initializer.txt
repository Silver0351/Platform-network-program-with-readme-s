import numpy as np
import sounddevice as sd
import soundfile as sf
import json
import requests  # For downloading addons from a server

class Initializer:
    def __init__(self, initial_matrix_size=4):
        self.matrix_size = initial_matrix_size
        self.fractal_matrix = self._init_fractal_matrix()
        self.instructions = self._generate_instructions()
        self.addons = {}  # Dictionary to hold addon data

    def _init_fractal_matrix(self):
        base = np.ones((self.matrix_size, self.matrix_size), dtype=int)
        for _ in range(int(np.log2(self.matrix_size))):
            base = np.kron(base, np.array([[1, 1], [1, 0]]))
        return base

    def _generate_instructions(self):
        return {
            'expand_rule': 'double_size',
            'data_encoding': 'frequency_amplitude',
            'addon_protocol': 'harmonic_addition'
        }

    def encode_to_tone(self):
        frequency = self.matrix_size * 100
        amplitude = 0.5
        duration = 1.0
        t = np.linspace(0, duration, int(44100 * duration))
        tone = amplitude * np.sin(2 * np.pi * frequency * t)
        
        modulated_tone = tone * (1 + 0.1 * np.sin(2 * np.pi * 20 * t))
        sf.write('initializer_tone.wav', modulated_tone, 44100)
        sd.play(modulated_tone, 44100)
        sd.wait()

    def decode_from_tone(self, audio_file):
        data, samplerate = sf.read(audio_file)
        frequency = np.argmax(np.abs(np.fft.rfft(data))) * (samplerate / len(data))
        matrix_size = int(frequency / 100)
        return self._init_fractal_matrix(), self.instructions

    def expand_matrix(self):
        new_size = self.matrix_size * 2
        expanded = np.zeros((new_size, new_size), dtype=int)
        expanded[:self.matrix_size, :self.matrix_size] = self.fractal_matrix
        self.fractal_matrix = expanded
        self.matrix_size = new_size

    def fetch_addons(self):
        # Fetch available addons from a server
        response = requests.get('http://example.com/addons/list.json')
        if response.status_code == 200:
            addons_list = response.json()
            for addon in addons_list:
                print(f"Available Addon: {addon['name']} - {addon['description']}")
            selected_addons = self._select_addons(addons_list)
            self._download_and_install_addons(selected_addons)

    def _select_addons(self, addons_list):
        # Here you would implement user interaction for addon selection
        # For this example, let's assume all addons are selected
        return [addon for addon in addons_list]

    def _download_and_install_addons(self, selected_addons):
        for addon in selected_addons:
            response = requests.get(addon['url'])
            if response.status_code == 200:
                addon_data = response.content  # Assuming addons are in binary or JSON format
                self.addons[addon['name']] = json.loads(addon_data) if addon_data.startswith(b'{') else addon_data
                self.apply_addon_pack(addon['name'])

    def apply_addon_pack(self, addon_name):
        if addon_name in self.addons:
            addon_data = self.addons[addon_name]
            if isinstance(addon_data, dict) and 'matrix' in addon_data:
                addon_matrix = np.array(addon_data['matrix'])
                # Merge addon matrix with existing one, assuming size compatibility
                self.fractal_matrix = np.maximum(self.fractal_matrix, addon_matrix[:self.matrix_size, :self.matrix_size])
            else:
                print(f"Invalid addon data for {addon_name}")

# Usage:
if __name__ == "__main__":
    init = Initializer()
    init.encode_to_tone()  # Play or save the initializer tone
    
    # Decode the tone (as if it was received)
    decoded_matrix, decoded_instructions = init.decode_from_tone('initializer_tone.wav')
    print("Decoded Matrix:\n", decoded_matrix)
    print("Decoded Instructions:", decoded_instructions)

    # Automatically fetch and install addons
    init.fetch_addons()
    print("Matrix after addons:\n", init.fractal_matrix)